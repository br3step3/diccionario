{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware/api-protection.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { headers } from 'next/headers';\r\n\r\n// Rate limiting configuration\r\nconst RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute\r\nconst MAX_REQUESTS = 50; // Maximum requests per window\r\n\r\n// In-memory store for rate limiting\r\nconst rateLimitStore = new Map<string, { count: number; timestamp: number }>();\r\n\r\n// Clean up old entries periodically\r\nsetInterval(() => {\r\n  const now = Date.now();\r\n  for (const [key, value] of rateLimitStore.entries()) {\r\n    if (now - value.timestamp > RATE_LIMIT_WINDOW) {\r\n      rateLimitStore.delete(key);\r\n    }\r\n  }\r\n}, RATE_LIMIT_WINDOW);\r\n\r\nexport async function apiProtection(req: NextRequest) {\r\n  // Get client IP\r\n  const ip = headers().get('x-forwarded-for') || 'unknown';\r\n\r\n  // Check API key\r\n  const apiKey = process.env.GOOGLE_GENAI_API_KEY;\r\n  if (!apiKey) {\r\n    return new NextResponse('API key not configured', { status: 500 });\r\n  }\r\n\r\n  // Rate limiting\r\n  const now = Date.now();\r\n  const clientData = rateLimitStore.get(ip) || { count: 0, timestamp: now };\r\n\r\n  // Reset count if window has passed\r\n  if (now - clientData.timestamp > RATE_LIMIT_WINDOW) {\r\n    clientData.count = 0;\r\n    clientData.timestamp = now;\r\n  }\r\n\r\n  // Increment request count\r\n  clientData.count++;\r\n  rateLimitStore.set(ip, clientData);\r\n\r\n  // Check if rate limit exceeded\r\n  if (clientData.count > MAX_REQUESTS) {\r\n    return new NextResponse('Rate limit exceeded', { status: 429 });\r\n  }\r\n\r\n  return NextResponse.next();\r\n}"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEA,8BAA8B;AAC9B,MAAM,oBAAoB,KAAK,MAAM,WAAW;AAChD,MAAM,eAAe,IAAI,8BAA8B;AAEvD,oCAAoC;AACpC,MAAM,iBAAiB,IAAI;AAE3B,oCAAoC;AACpC,YAAY;IACV,MAAM,MAAM,KAAK,GAAG;IACpB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,eAAe,OAAO,GAAI;QACnD,IAAI,MAAM,MAAM,SAAS,GAAG,mBAAmB;YAC7C,eAAe,MAAM,CAAC;QACxB;IACF;AACF,GAAG;AAEI,eAAe,cAAc,GAAgB;IAClD,gBAAgB;IAChB,MAAM,KAAK,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC,sBAAsB;IAE/C,gBAAgB;IAChB,MAAM,SAAS,QAAQ,GAAG,CAAC,oBAAoB;IAC/C,IAAI,CAAC,QAAQ;QACX,OAAO,IAAI,6LAAA,CAAA,eAAY,CAAC,0BAA0B;YAAE,QAAQ;QAAI;IAClE;IAEA,gBAAgB;IAChB,MAAM,MAAM,KAAK,GAAG;IACpB,MAAM,aAAa,eAAe,GAAG,CAAC,OAAO;QAAE,OAAO;QAAG,WAAW;IAAI;IAExE,mCAAmC;IACnC,IAAI,MAAM,WAAW,SAAS,GAAG,mBAAmB;QAClD,WAAW,KAAK,GAAG;QACnB,WAAW,SAAS,GAAG;IACzB;IAEA,0BAA0B;IAC1B,WAAW,KAAK;IAChB,eAAe,GAAG,CAAC,IAAI;IAEvB,+BAA+B;IAC/B,IAAI,WAAW,KAAK,GAAG,cAAc;QACnC,OAAO,IAAI,6LAAA,CAAA,eAAY,CAAC,uBAAuB;YAAE,QAAQ;QAAI;IAC/D;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { apiProtection } from './middleware/api-protection';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  // Only apply protection to API routes\r\n  if (request.nextUrl.pathname.startsWith('/api/')) {\r\n    return apiProtection(request);\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: '/api/:path*',\r\n};"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,sCAAsC;IACtC,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU;QAChD,OAAO,CAAA,GAAA,8IAAA,CAAA,gBAAa,AAAD,EAAE;IACvB;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;AACX"}}]
}