{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/components/ui/raw-response-dialog.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport { X } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface RawResponseDialogProps {\r\n  rawResponse: string\r\n  onOpenChange?: (open: boolean) => void\r\n}\r\n\r\nexport function RawResponseDialog({\r\n  rawResponse,\r\n  onOpenChange,\r\n}: RawResponseDialogProps) {\r\n  return (\r\n    <DialogPrimitive.Root defaultOpen onOpenChange={onOpenChange}>\r\n      <DialogPrimitive.Portal>\r\n        <DialogPrimitive.Overlay className=\"fixed inset-0 z-50 bg-black/80\" />\r\n        <DialogPrimitive.Content\r\n          className={cn(\r\n            \"fixed left-[50%] top-[50%] z-50 w-full max-w-2xl translate-x-[-50%] translate-y-[-50%] rounded-lg bg-background p-6 shadow-lg\",\r\n            \"focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\r\n          )}\r\n        >\r\n          <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\">\r\n            <X className=\"h-4 w-4\" />\r\n            <span className=\"sr-only\">Close</span>\r\n          </DialogPrimitive.Close>\r\n          \r\n          <DialogPrimitive.Title className=\"text-lg font-semibold\">Raw Gemini Response</DialogPrimitive.Title>\r\n          <div className=\"space-y-4\">\r\n            <pre className=\"max-h-[70vh] overflow-auto rounded bg-muted p-4 text-sm whitespace-pre-wrap break-words\">\r\n              {rawResponse}\r\n            </pre>\r\n            <div className=\"mt-4\">\r\n              <h4 className=\"text-md font-medium\">Raw Response Details</h4>\r\n              <pre className=\"max-h-[50vh] overflow-auto rounded bg-muted p-4 text-sm whitespace-pre-wrap break-words\">\r\n                {rawResponse}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </DialogPrimitive.Content>\r\n      </DialogPrimitive.Portal>\r\n    </DialogPrimitive.Root>\r\n  )\r\n}"],"names":[],"mappings":";;;;AAGA;AACA;AAEA;AANA;;;;;AAaO,SAAS,kBAAkB,EAChC,WAAW,EACX,YAAY,EACW;IACvB,qBACE,6LAAC,qKAAA,CAAA,OAAoB;QAAC,WAAW;QAAC,cAAc;kBAC9C,cAAA,6LAAC,qKAAA,CAAA,SAAsB;;8BACrB,6LAAC,qKAAA,CAAA,UAAuB;oBAAC,WAAU;;;;;;8BACnC,6LAAC,qKAAA,CAAA,UAAuB;oBACtB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iIACA;;sCAGF,6LAAC,qKAAA,CAAA,QAAqB;4BAAC,WAAU;;8CAC/B,6LAAC,+LAAA,CAAA,IAAC;oCAAC,WAAU;;;;;;8CACb,6LAAC;oCAAK,WAAU;8CAAU;;;;;;;;;;;;sCAG5B,6LAAC,qKAAA,CAAA,QAAqB;4BAAC,WAAU;sCAAwB;;;;;;sCACzD,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;8CACZ;;;;;;8CAEH,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAG,WAAU;sDAAsB;;;;;;sDACpC,6LAAC;4CAAI,WAAU;sDACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQjB;KAnCgB","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-lg ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nInput.displayName = \"Input\"\r\n\r\nexport { Input }\r\n\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,gYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/ai/flows/generate-example-sentences.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview Generates example sentences for a given Spanish word using AI.\r\n *\r\n * - generateExampleSentences - A function that generates example sentences for a given Spanish word.\r\n * - GenerateExampleSentencesInput - The input type for the generateExampleSentences function.\r\n * - GenerateExampleSentencesOutput - The return type for the generateExampleSentences function.\r\n */\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateExampleSentencesInputSchema = z.object({\r\n  spanishWord: z.string().describe('The Spanish word to generate example sentences for.'),\r\n});\r\nexport type GenerateExampleSentencesInput = z.infer<typeof GenerateExampleSentencesInputSchema>;\r\n\r\nconst GenerateExampleSentencesOutputSchema = z.object({\r\n  exampleSentences: z.array(\r\n    z.string().describe('An example sentence using the Spanish word.')\r\n  ).describe('A list of example sentences using the Spanish word.'),\r\n});\r\nexport type GenerateExampleSentencesOutput = z.infer<typeof GenerateExampleSentencesOutputSchema>;\r\n\r\nexport async function generateExampleSentences(\r\n  input: GenerateExampleSentencesInput\r\n): Promise<GenerateExampleSentencesOutput> {\r\n  return generateExampleSentencesFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateExampleSentencesPrompt',\r\n  input: {\r\n    schema: z.object({\r\n      spanishWord: z.string().describe('The Spanish word to generate example sentences for.'),\r\n    }),\r\n  },\r\n  output: {\r\n    schema: z.object({\r\n      exampleSentences: z.array(\r\n        z.string().describe('An example sentence using the Spanish word.')\r\n      ).describe('A list of example sentences using the Spanish word.'),\r\n    }),\r\n  },\r\n  prompt: `You are a Spanish language expert.  Generate 3 example sentences using the word {{{spanishWord}}}. Return the sentences as a JSON array of strings.`, \r\n});\r\n\r\nconst generateExampleSentencesFlow = ai.defineFlow<\r\n  typeof GenerateExampleSentencesInputSchema,\r\n  typeof GenerateExampleSentencesOutputSchema\r\n>(\r\n  {\r\n    name: 'generateExampleSentencesFlow',\r\n    inputSchema: GenerateExampleSentencesInputSchema,\r\n    outputSchema: GenerateExampleSentencesOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;IAwBsB","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/ai/flows/generate-definition.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview Generates a definition for a given Spanish word using AI.\r\n *\r\n * - generateDefinition - A function that generates a definition for a given Spanish word.\r\n * - GenerateDefinitionInput - The input type for the generateDefinition function.\r\n * - GenerateDefinitionOutput - The return type for the generateDefinition function.\r\n */\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateDefinitionInputSchema = z.object({\r\n  spanishWord: z.string().describe('The Spanish word to generate a definition for.'),\r\n});\r\nexport type GenerateDefinitionInput = z.infer<typeof GenerateDefinitionInputSchema>;\r\n\r\nconst GenerateDefinitionOutputSchema = z.object({\r\n  definition: z.string().describe('A definition of the Spanish word.'),\r\n});\r\nexport type GenerateDefinitionOutput = z.infer<typeof GenerateDefinitionOutputSchema>;\r\n\r\nexport async function generateDefinition(\r\n   input: GenerateDefinitionInput\r\n): Promise<GenerateDefinitionOutput & { rawResponse?: string }> {\r\n  const result = await generateDefinitionFlow(input);\r\n  return {\r\n    ...result,\r\n    rawResponse: result.rawResponse\r\n  };\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateDefinitionPrompt',\r\n  input: {\r\n    schema: z.object({\r\n      spanishWord: z.string().describe('The Spanish word to generate a definition for.'),\r\n    }),\r\n  },\r\n  output: {\r\n    schema: z.object({\r\n      definition: z.string().describe('A definition of the Spanish word.'),\r\n    }),\r\n  },\r\n  prompt: `You are a Spanish language expert. Provide a concise definition for the word: {{{spanishWord}}}.`,\r\n});\r\n\r\nconst generateDefinitionFlow = ai.defineFlow<\r\n  typeof GenerateDefinitionInputSchema,\r\n  typeof GenerateDefinitionOutputSchema & { rawResponse?: string }\r\n>(\r\n  {\r\n    name: 'generateDefinitionFlow',\r\n    inputSchema: GenerateDefinitionInputSchema,\r\n    outputSchema: GenerateDefinitionOutputSchema,\r\n  },\r\n  async input => {\r\n    const response = await prompt(input);\r\n    return {\r\n      ...response.output!,\r\n      rawResponse: JSON.stringify(response, null, 2)\r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;IAsBsB","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nadie/Documents/GitHub/diccionario/src/app/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport { RawResponseDialog } from '@/components/ui/raw-response-dialog';\r\nimport {Input} from '@/components/ui/input';\r\nimport {Button} from '@/components/ui/button';\r\nimport {Card, CardContent, CardHeader, CardTitle} from '@/components/ui/card';\r\nimport {generateExampleSentences} from '@/ai/flows/generate-example-sentences';\r\nimport {generateDefinition} from '@/ai/flows/generate-definition';\r\nimport {Sparkles} from 'lucide-react';\r\n\r\nexport default function Home() {\r\n  const [spanishWord, setSpanishWord] = useState('');\r\n  const [definition, setDefinition] = useState<string | null>(null);\r\n  const [exampleSentences, setExampleSentences] = useState<string[] | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [rawResponse, setRawResponse] = useState<string | null>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    // Clear previous data when the Spanish word changes\r\n    setDefinition(null);\r\n    setExampleSentences(null);\r\n  }, [spanishWord]);\r\n\r\n  const handleDefineWord = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const definitionResult = await generateDefinition({spanishWord});\r\n      setDefinition(definitionResult.definition);\r\n      setRawResponse(definitionResult.rawResponse || 'No raw response available');\r\n\r\n      const exampleSentencesResult = await generateExampleSentences({spanishWord});\r\n      setExampleSentences(exampleSentencesResult.exampleSentences);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setDefinition('No se pudo cargar la definición.');\r\n      setExampleSentences(['No se pudieron cargar las oraciones de ejemplo.']);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSpanishWord(e.target.value);\r\n  };\r\n\r\n   const handleInputKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleDefineWord();\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className=\"flex flex-col items-center justify-start min-h-screen p-4 bg-white\">\r\n      <h1 className=\"text-4xl font-extrabold text-teal-800 mb-8 flex items-center\">\r\n        Español Esencial\r\n        <Sparkles className=\"ml-2 h-6 w-6 animate-pulse text-yellow-500\" />\r\n      </h1>\r\n      <div className=\"w-full max-w-md space-y-4\">\r\n        <div className=\"flex space-x-2\">\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Introduce una palabra en español\"\r\n            value={spanishWord}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            className=\"flex-1 text-2xl\"\r\n            ref={inputRef}\r\n          />\r\n          <Button onClick={handleDefineWord} disabled={isLoading || !spanishWord}>\r\n            {isLoading ? (\r\n              'Definiendo...'\r\n            ) : (\r\n              'Definir'\r\n            )}\r\n          </Button>\r\n        </div>\r\n\r\n        {definition && (\r\n          <Card className=\"bg-gray-100 shadow-md rounded-lg\">\r\n            <CardHeader>\r\n              <CardTitle>Definición</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <p>{definition}</p>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {exampleSentences && (\r\n          <Card className=\"bg-gray-100 shadow-md rounded-lg\">\r\n            <CardHeader>\r\n              <CardTitle>Oraciones de Ejemplo</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <ul className=\"list-disc list-inside space-y-2\">\r\n                {exampleSentences.map((sentence, index) => (\r\n                  <li key={index}>{sentence}</li>\r\n                ))}\r\n              </ul>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {rawResponse && (\r\n          <RawResponseDialog\r\n            rawResponse={rawResponse}\r\n            onOpenChange={(open) => !open && setRawResponse(null)}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n     </>\r\n  );\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}